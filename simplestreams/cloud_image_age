#!/usr/bin/env python3
"""Report oldest image age for a release on a particular cloud.

Copyright 2017 Canonical Ltd.
Joshua Powers <josh.powers@canonical.com>
"""
import argparse
from datetime import datetime
import json
import shlex
import subprocess
import sys


from distro_info import UbuntuDistroInfo

SUPPORTED_CLOUDS = ['azure', 'cloud', 'ec2', 'gce', 'maas', 'maas3']
SUPPORTED_RELEASES = UbuntuDistroInfo().supported()


def date_diff(first, second):
    """Difference between two dates."""
    first = datetime.strptime(first, '%Y%m%d')
    second = datetime.strptime(second, '%Y%m%d')
    return abs((first - second).days)


def call_image_status(cloud, release):
    """Call the image_status script."""
    cmd = './image-status %s release=%s json' % (cloud, release)
    process = subprocess.Popen(shlex.split(cmd),
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    out, _ = process.communicate()
    return json.loads(out)


def main(cloud, release):
    """Determine oldest image age."""
    print('Searching "%s" for "%s" images' % (cloud, release))

    results = call_image_status(cloud, release)
    oldest_date = min(result['version_name'] for result in results)
    current_date = datetime.utcnow().strftime('%Y%m%d')
    difference = date_diff(current_date, oldest_date)

    print('Today\'s Date: %s' % current_date)
    print('Oldest Image Date: %s' % oldest_date)
    print('Difference: %s days' % difference)


if __name__ == '__main__':
    PARSER = argparse.ArgumentParser()
    PARSER.add_argument('-c', '--cloud', required=True,
                        help='Name of cloud to query.')
    PARSER.add_argument('-r', '--release', default=None,
                        help='Ubuntu release to search for.')
    ARGS = PARSER.parse_args()

    if not ARGS.release:
        ARGS.release = UbuntuDistroInfo().devel()
    if ARGS.release not in SUPPORTED_RELEASES:
        print('Invalid release, choose from: %s' % SUPPORTED_RELEASES)
        sys.exit(1)
    if ARGS.cloud not in SUPPORTED_CLOUDS:
        print('Invalid cloud, choose from: %s' % SUPPORTED_CLOUDS)
        sys.exit(1)

    main(ARGS.cloud, ARGS.release)
