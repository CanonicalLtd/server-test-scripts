test_data:
    test_cmds: |
        set -ex

        # Print some information about the testflinger host system
        cat /etc/os-release
        uname -a
        id
        pwd
        ls -la

        # Do not auto-update snaps on the provisioned device for now; we'll
        # update them manually later. If changing this remember that Core
        # may auto-reboot after a snap refresh.
        ssh ubuntu@$DEVICE_IP 'sudo snap set system refresh.hold="$(date --date=tomorrow +%Y-%m-%dT%H:%M:%S%:z)"'

        mkdir artifacts
        cd artifacts
        date --utc --rfc-3339=ns > job-start-timestamp

        curl -Ss -O https://raw.githubusercontent.com/paride/server-test-scripts/bootspeed/boot-speed/testflinger/bootspeed.sh
        chmod +x bootspeed.sh
        scp -p bootspeed.sh ubuntu@$DEVICE_IP:

        bootid=$(ssh ubuntu@$DEVICE_IP cat /proc/sys/kernel/random/boot_id)
        ssh ubuntu@$DEVICE_IP rm -rfv artifacts
        ssh ubuntu@$DEVICE_IP ./bootspeed.sh
        scp -r ubuntu@$DEVICE_IP:artifacts boot_0

        # Refresh the snaps. Running `snap list` after the refresh may
        # trigger a reboot on Core systems. Take it into account and wait
        # for the system to be back online before proceeding.
        ssh ubuntu@$DEVICE_IP sudo snap refresh
        sleep 2
        #ssh ubuntu@$DEVICE_IP snap list || true
        #sleep 5
        #timeout 20m sh -c "until ssh ubuntu@$DEVICE_IP 'sudo snap refresh && snap list'; do sleep 1m; done"
        timeout 10m sh -c "until ssh ubuntu@$DEVICE_IP 'snap changes | tee /dev/stderr | grep -qv Doing'; do sleep 10s; done"
        ssh ubuntu@$DEVICE_IP sudo journalctl --list-boots

        reboots=1

        for rebootidx in $(seq 1 $reboots); do
            echo "Rebooting system for reboot $rebootidx of $reboots"
            ssh ubuntu@$DEVICE_IP sudo systemctl reboot || true

            # Wait for the system to be back online (i.e. we can ssh to it).
            # This is basically what the testflinger agent does, e.g.
            # https://git.launchpad.net/snappy-device-agents/tree/devices/rpi3/rpi3.py
            sleep 2m
            if timeout 8m sh -c "until ssh ubuntu@$DEVICE_IP uptime; do sleep 10; done"; then
                # Did the device reboot for real?
                new_bootid=$(ssh ubuntu@$DEVICE_IP cat /proc/sys/kernel/random/boot_id)
                if [ "$new_bootid" = "$bootid" ]; then
                    touch DEVICE-DID-NOT-REBOOT
                    exit 1
                fi
                bootid=$new_bootid

                ssh ubuntu@$DEVICE_IP ./bootspeed.sh
                scp -r ubuntu@$DEVICE_IP:artifacts boot_$rebootidx
            else
                touch DEVICE-DID-NOT-SURVIVE-REBOOT-$rebootidx
                exit 1
            fi
        done

        ssh ubuntu@$DEVICE_IP touch boot-speed-measurement-taken-here
        ssh ubuntu@$DEVICE_IP rm -rfv artifacts

        # When retrieving the artifacts file we check for the existence of
        # this file to tell if the measurement was fulle successful.
        touch testflinger-script-ok
